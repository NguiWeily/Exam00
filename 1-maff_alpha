Assignment name  : maff_alpha
Expected files   : maff_alpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet, with even letters in uppercase, and
odd letters in lowercase, followed by a newline.

Example:

$> ./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$

Here's an example implementation of the `maff_alpha` program in C:

```c
#include <unistd.h>

int main() {
    char even = 'B';
    char odd = 'a';

    while (odd <= 'z') {
        write(1, &odd, 1);
        write(1, &even, 1);
        odd += 2;
        even += 2;
    }

    write(1, "\n", 1);

    return 0;
}
```

In this program, we include the `<unistd.h>` header file to have access to the `write()` function.

In the `main()` function, we declare two character variables `even` and `odd`. `even` represents the uppercase letters for even positions, starting from `'B'`, and `odd` represents the lowercase letters for odd positions, starting from `'a'`.

We then enter a `while` loop that iterates as long as `odd` is less than or equal to `'z'`, which represents the end of the lowercase letters. Inside the loop, we use the `write()` function to write the current values of `odd` and `even` to the standard output. First, we write `odd` to display the lowercase letter, and then we write `even` to display the uppercase letter. After that, we increment `odd` by 2 to move to the next odd letter and increment `even` by 2 to move to the next even letter.

After the loop, we use the `write()` function to write a newline character `"\n"` to the standard output, which prints a newline after displaying the alphabet.

To compile and run the program, you can use a C compiler such as `gcc`:

```
$ gcc maff_alpha.c -o maff_alpha
$ ./maff_alpha
aBcDeFgHiJkLmNoPqRsTuVwXyZ
```

When you execute the program, it displays the alphabet with even letters in uppercase and odd letters in lowercase, followed by a newline.
